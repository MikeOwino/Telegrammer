// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.

public extension Bot {

    /// Parameters container struct for `leaveChat` method
    struct LeaveChatParams: JSONEncodable {

        /// Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
        var chatId: ChatId

        /// Custom keys for coding/decoding `LeaveChatParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
        }

        public init(chatId: ChatId) {
            self.chatId = chatId
        }
    }

    /**
     Use this method for your bot to leave a group, supergroup or channel. Returns True on success.

     SeeAlso Telegram Bot API Reference:
     [LeaveChatParams](https://core.telegram.org/bots/api#leavechat)
     
     - Parameters:
         - params: Parameters container, see `LeaveChatParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Bool` type
     */
    @discardableResult
    func leaveChat(params: LeaveChatParams) throws -> Future<Bool> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        return try client
            .request(endpoint: "leaveChat", body: body, headers: headers)
            .flatMapThrowing { (container) -> Bool in
                return try self.processContainer(container)
        }
    }
}

// MARK: Concurrency Support
#if compiler(>=5.5)
@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
public extension Bot {

    /**
     Use this method for your bot to leave a group, supergroup or channel. Returns True on success.

     SeeAlso Telegram Bot API Reference:
     [LeaveChatParams](https://core.telegram.org/bots/api#leavechat)
     
     - Parameters:
         - params: Parameters container, see `LeaveChatParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Bool` type
     */
    @discardableResult
    func leaveChat(params: LeaveChatParams) async throws -> Bool {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        return try self.processContainer(try await client.request(endpoint: "leaveChat", body: body, headers: headers))
    }
}
#endif
